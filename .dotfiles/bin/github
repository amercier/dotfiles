#!/usr/bin/env sh

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

# DESCRIPTION
#
# Open the GitHub project page of a directory which is under version control with a GitHub project,
# based on:
# - the name of the current remote branch. Ex: "origin/master"
# - the URL of the associated origin. Ex: origin=git@github.com:facebook/react.git
#
# Tries to open the most accurate page:
# - if on master branch, open https://github.com/<REPO>/
# - otherwise, if a Pull Request exists, opens https://github.com/<REPO>/pull/<PR>,
# - otherwise, opens the branch page https://github.com/<REPO>/tree/<BRANCH>
#
# SYNTAX
#
#     github                       # Opens the GitHub URL of the project.
#
#     github FILE_1 FILE_2         # Opens FILE_1 and FILE_2 GitHub URLs.
#
#     find . -name FILE | github   # Finds all files named FILE and opens them on GitHub.

if [ ! -d .git ] && ! git rev-parse --git-dir > /dev/null 2>&1
then
  echo "Not a git repository" >&2
  exit 1
fi

remote_branch=$(git rev-parse --abbrev-ref --symbolic-full-name '@{u}' 2>/dev/null || echo)
if [ -z "$remote_branch" ]
then
  echo 'Warning: Not connected to a remote branch.' >&2
  echo 'Please run "git push --set-upstream origin BRANCH_NAME" to set one.' >&2
  remote_branch="$(git remote | head -n 1)/master"
  echo "Defaulting to \"$remote_branch\""
fi
remote_name="$(echo "$remote_branch" | cut -d / -f1)"
branch_name="$(echo "$remote_branch" | cut -d / -f2-)"


ssh_remote="$(git remote get-url "$remote_name" 2>/dev/null)"
if [ -z "$ssh_remote" ]
then
  echo "$remote_name remote not found" >&2
  exit 1
elif ! echo "$ssh_remote" | grep -q github.com
then
  echo "Not a GitHub repository: $ssh_remote" >&2
  exit 1
fi

github_url="$(echo "$ssh_remote" | sed 's/^git@github.com:/https:\/\/github.com\//; s/.git$//')"
github_pr=""

# Look for associated PR (only when no argument is provided)
if [ "$#" = 0 ]
then
  # Tries show-ref (local)
  # TODO Why -q does not work?
  if [ "$(git show-ref | grep -c "refs/remotes/$remote_name/pr/")" != 0 ]
  then
    github_pr="$(git show-ref | grep "$(git rev-parse "$remote_branch") refs/remotes/$remote_name/pr/" | cut -d / -f5 || echo)"
  # Otherwise default to ls-remote (remote), with a warning
  else
    echo 'Warning: could not find any "pr/XXX" ref, please run:' >&2
    echo "git config --add remote.$remote_name.fetch '+refs/pull/*/head:refs/remotes/$remote_name/pr/*'" >&2
    github_pr=$(git ls-remote 2>/dev/null | grep "$(git rev-parse "$remote_branch")\\srefs/pull" | cut -d / -f3  || echo)
  fi
fi

if [ -n "$github_pr" ]
then
  github_url="$github_url/pull/$github_pr"
elif [ ! -t 0 ] || [ "$#" != 0 ] || [ "$branch_name" != "master" ]
then
  # Add URL path when needed
  github_url="$github_url/tree/$branch_name"
fi

# TODO Refactor
open_path() {
  if [ "$1" = '.' ]
  then
    # TODO: handle non-root dir
    url="$github_url"
  else
    # TODO: Cleanup path
    url="$github_url/$1"
  fi

  if [ -e "$1" ]
  then
    echo "Opening $url"
    open "$url"
  else
    echo "File does not exist, skipping: $1" >&2
  fi
}

if [ "$#" != 0 ]
then
  # When used with arguments, open each one as a file
  for path in "$@"; do open_path "$path"; done
elif [ ! -t 0 ]
then
  # Or with stdin, open each line as a file
  while read -r path; do open_path "$path"; done
else
  # Otherwise open current folder
  open_path .
fi
