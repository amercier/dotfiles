#!/usr/bin/env bash
# shellcheck disable=SC1090
# shellcheck disable=SC1091

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

. "$dir/../lib/colors.sh"

filepaths=$(find "$dir/../lib" -type f -not -name '.*' -not -name '*.example' -not -name 'colors.sh')
for filepath in $filepaths
do
  . "$filepath"
  relative_path="$(realpath --relative-to="$dir/../lib" "$filepath")"
  echo "$(green ✓) Loaded $(cyan "$relative_path") library"
done
echo

# Xcode Command Line Tools
install_or_update directory "$(xcode-select -p)" "Command Line Tools for Xcode" \
  'xcode-select --install'

# Brew
install_or_update command brew Homebrew \
  "curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install | /usr/bin/env ruby" \
  'brew update && brew cleanup'

# Brew kegs
install_or_update_brew_keg coreutils
install_or_update_brew_keg git
install_or_update_brew_keg grep
install_or_update_brew_keg mas
install_or_update_brew_keg nodebrew
install_or_update_brew_keg shellcheck
install_or_update_brew_keg watchman
install_or_update_brew_keg wget
install_or_update_brew_keg zsh
install_or_update_brew_keg zsh-completions

# App Store
install_or_update_mas_application Dashlane
install_or_update_mas_application Moom

# Brew casks
install_or_update_brew_cask_application "Google Chrome" google-chrome
install_or_update_brew_cask_application "GPG Keychain" gpg-suite
install_or_update_brew_cask_application Hyper hyper
install_or_update_brew_cask_application "Visual Studio Code" visual-studio-code
install_or_update_brew_cask_application VLC vlc
install_or_update_brew_cask java

if sysctl hw.model | grep -q iMac
then
  install_or_update_brew_cask_application Discord discord
fi

# Brew services
install_or_update_brew_service mysql@5.7
install_or_update_brew_service postgres
install_or_update_brew_service mongodb

# Default Shell
zsh_path="$(command -v zsh)"

if grep "$zsh_path" /etc/shells > /dev/null
then
  echo "$(green ✓) $(cyan "$zsh_path") exits already in /etc/shells"
else
  echo "$(blue ▶) Adding $(cyan "$zsh_path") to $(yellow /etc/shells)"
  echo "$zsh_path" | sudo tee /etc/shells > /dev/null
  echo "$(green ✓) Done"
fi

if [ "$(dscl . -read "/Users/$USER" UserShell | sed 's/^[^ ]* //')" = "$zsh_path" ]
then
  echo "$(green ✓) Default shell already set to $(cyan "$zsh_path")."
else
  echo "$(blue ▶) Setting default shell to $(cyan "$zsh_path")..."
  chsh -s "$zsh_path"
  echo "$(green ✓) Done"
  echo
fi

# Prezto
install_or_update directory "$HOME/.zprezto" "Zprezto" \
  "git clone --recursive https://github.com/sorin-ionescu/prezto.git '$HOME/.zprezto'"  \
  "(cd '$HOME/.zprezto' && git pull --rebase --recurse-submodules)"

# SSH
if [ ! -e "$HOME/.ssh/id_rsa" ]
then
  echo "Generating SSH keys..."
  ssh-keygen -t rsa -b 4096 -C "$(git config --global user.email)" -f "$HOME/.ssh/id_rsa"

  echo "Adding SSH key to the ssh-agent"
  eval "$(ssh-agent -s)"

  echo "Seting SSH config to automatically load ssh-agent..."
  if [ -e "$HOME/.ssh/config" ]
  then
    echo "Warning: $HOME/.ssh/config, skipping"
  else
    echo "Host *
      AddKeysToAgent yes
      UseKeychain yes
      IdentityFile ~/.ssh/id_rsa" > "$HOME/.ssh/config"
    echo "Done"
  fi
  echo
fi

# GPG keys
if [ -z "$(gpg --list-secret-keys)" ]
then
  echo "$(red ✗ No GPG key found.) Please create one using: $(yellow gpg --full-generate-key)" >&2
  exit 1
fi
gpg_key_id="$(gpg --list-secret-keys --keyid-format LONG | grep 'sec ' | sed 's/^.*rsa4096\/\([^ ]*\).*$/\1/')"
echo "$(green ✓) Found GPG key: $(cyan "$gpg_key_id")"
if [ -z "$(git config --global user.signingkey)" ]
then
  echo "$(blue ▶) Setting git to use GPG key $(cyan "$gpg_key_id")"
  git config --global user.signingkey "$gpg_key_id"
  echo "$(green ✓) Done"
elif [ "$(git config --global user.signingkey)" = "$gpg_key_id" ]
then
  echo "$(green ✓) git already set to use GPG key $(cyan "$gpg_key_id")"
else
  echo "$(yellow '⚠ Warning:') git set to use GPG key $(magenta "$(git config --global user.signingkey)") instead of $(cyan "$gpg_key_id")"
fi
echo

# Disable the sound effects on boot
if [ -e /Library/Scripts/macos-mute-off ] && [ -e /Library/Scripts/macos-mute-on ]
then
  echo "$(green ✓) Startup sound already disabled"
else
  echo "$(blue ▶) Disabling startup sound"
  printf '#!/usr/bin/env sh\n\nosascript -e "set volume without output muted"\n' | sudo tee /Library/Scripts/macos-mute-off > /dev/null
  printf '#!/usr/bin/env sh\n\nosascript -e "set volume with output muted"\n' | sudo tee /Library/Scripts/macos-mute-on > /dev/null
  sudo chmod +x /Library/Scripts/macos-mute-off /Library/Scripts/macos-mute-on
  sudo defaults write com.apple.loginwindow LoginHook "/Library/Scripts/macos-mute-off"
  sudo defaults write com.apple.loginwindow LogoutHook "/Library/Scripts/macos-mute-on"
  echo "$(green ✓) Done"
  echo
fi

# System preferences

# General
macos_set_preference NSGlobalDomain ApplePersistence bool 0
macos_set_preference NSGlobalDomain com.apple.sound.beep.flash bool 1
macos_set_preference NSGlobalDomain com.apple.springing.delay float 1
macos_set_preference NSGlobalDomain com.apple.swipescrolldirection bool 0
macos_set_preference NSGlobalDomain DSDontWriteNetworkStores bool 1
macos_set_preference NSGlobalDomain NSDisableAutomaticTermination bool 1
macos_set_preference NSGlobalDomain NSDocumentSaveNewDocumentsToCloud bool 0
macos_set_preference NSGlobalDomain NSNavPanelExpandedStateForSaveMode bool 1
macos_set_preference NSGlobalDomain NSTextShowsControlCharacters bool 1
macos_set_preference NSGlobalDomain NSWindowResizeTime float 0.2
macos_set_preference NSGlobalDomain PMPrintingExpandedStateForPrint bool 1

# Launch services
macos_set_preference com.apple.LaunchServices LSQuarantine bool 0

# Help
macos_set_preference com.apple.helpviewer DevMode bool 1

# Dock
macos_set_preference com.apple.dock autohide bool 1
macos_set_preference com.apple.dock launchanim bool 0
macos_set_preference com.apple.dock minimize-to-application bool 1
macos_set_preference com.apple.dock autohide-time-modifier float 0.2
macos_set_preference com.apple.dock mineffect string scale
macos_set_preference com.apple.dock enable-spring-load-actions-on-all-items bool 1

# Finder
macos_set_preference com.apple.finder QuitMenuItem bool 1
macos_set_preference com.apple.finder DisableAllAnimations bool 1
macos_set_preference com.apple.finder FXDefaultSearchScope string "SCcf" # When performing a search, search the current folder by default
macos_set_preference com.apple.finder FXPreferredViewStyle string 'Nlsv' # Use list view in all Finder windows by default
macos_set_preference com.apple.finder FXEnableExtensionChangeWarning bool 0
macos_set_preference com.apple.finder QLEnableTextSelection bool 1
macos_set_preference com.apple.finder DisableAllAnimations bool 1
macos_set_preference com.apple.finder expose-animation-duration float 0.1 # Speed up Mission Control animations

# Other
macos_set_preference /Library/Preferences/com.apple.loginwindow GuestEnabled bool 0 SUDO
macos_set_preference /Library/Preferences/SystemConfiguration/com.apple.smb.server AllowGuestAccess bool 0 SUDO
macos_set_preference /Library/Preferences/com.apple.AppleFileServer guestAccess bool 0 SUDO
macos_set_preference org.R-project.R force.LANG string en_US.UTF-8 # Fix 'tar: Failed to set default locale' warning

echo

# Node versions
install_or_update_nodebrew_node_version 0.10
install_or_update_nodebrew_node_version 0.12
install_or_update_nodebrew_node_version 4
install_or_update_nodebrew_node_version 6
install_or_update_nodebrew_node_version 8
install_or_update_nodebrew_node_version 10
install_or_update_nodebrew_node_version latest
nodebrew_alias default > /dev/null || nodebrew alias default latest
nodebrew use default

# Globally-installed NPM packages
npm install -g npm yarn avn avn-nodebrew

# VSCode
code --install-extension Shan.code-settings-sync

# Workspace
create_directory_if_not_exists "$HOME/Workspace"

# App Store updates
echo "$(blue ▶) Looking for App Store updates..."
softwareupdate --install --all
