#!/usr/bin/env bash
# shellcheck disable=SC1090
# shellcheck disable=SC1091

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

. "$dir/../lib/colors.sh"

filepaths=$(find "$dir/../lib" -type f -not -name '.*' -not -name '*.example' -not -name 'colors.sh')
for filepath in $filepaths
do
  . "$filepath"
  relative_path=$(realpath --relative-to="$dir/../lib" "$filepath")
  echo "$(green ✓) Loaded $(cyan "$relative_path") library"
done
echo

# App Store updates
echo "$(blue ▶) Looking for App Store updates..."
softwareupdate --install --all

# Xcode Command Line Tools
install_or_update directory "$(xcode-select -p)" "Command Line Tools for Xcode" \
  'xcode-select --install'

# Brew
install_or_update command brew Homebrew \
  "curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install | /usr/bin/env ruby" \
  'brew update && brew prune && brew cleanup'

# Stop and uninstall built-in Apache if http is not installed
if ! brew_keg_exists httpd
then
  sudo apachectl stop
  disable_launch_daemon org.apache.httpd
fi

# Brew kegs
install_or_update_brew_keg coreutils
install_or_update_brew_keg git
install_or_update_brew_keg grep
install_or_update_brew_keg mas
install_or_update_brew_keg nvm
install_or_update_brew_keg shellcheck
install_or_update_brew_keg sqlite
install_or_update_brew_keg watchman
install_or_update_brew_keg wget
install_or_update_brew_keg zsh
install_or_update_brew_keg zsh-completions

# App Store
install_or_update_mas_application Dashlane
install_or_update_mas_application Moom
install_or_update_mas_application WhatsApp

# Brew casks
install_or_update_brew_cask_application Atom atom
install_or_update_brew_cask_application Catlight catlight
install_or_update_brew_cask_application FileZilla filezilla
install_or_update_brew_cask_application Flux flux
install_or_update_brew_cask_application "Google Chrome" google-chrome
install_or_update_brew_cask_application "GPG Keychain" gpg-suite
install_or_update_brew_cask_application Hyper hyper
install_or_update_brew_cask_application VirtualBox virtualbox
install_or_update_brew_cask_application VLC vlc
install_or_update_brew_cask java

if sysctl hw.model | grep -q MacBookAir
then
  install_or_update_brew_cask_application Karabiner-Elements karabiner-elements
fi

if sysctl hw.model | grep -q iMac
then
  install_or_update_brew_cask_application Discord discord
fi

# Brew services
install_or_update_brew_service dnsmasq SUDO
install_or_update_brew_service mysql@5.7
install_or_update_brew_service postgres
install_or_update_brew_service mongodb
install_or_update_brew_service httpd "" "\
  uncomment 'ServerName www.example.com:8080' /usr/local/etc/httpd/httpd.conf && \
  replace_inline 'ServerName www.example.com:8080' 'ServerName localhost' /usr/local/etc/httpd/httpd.conf && \
  uncomment 'Include /usr/local/etc/httpd/extra/httpd-vhosts.conf' /usr/local/etc/httpd/httpd.conf && \
  replace_inline 'httpd-vhosts.conf$' 'httpd-vhosts.conf.d/*.conf' '/usr/local/etc/httpd/httpd.conf' && \
  uncomment 'LoadModule deflate_module' /usr/local/etc/httpd/httpd.conf && \
  uncomment 'LoadModule expires_module' /usr/local/etc/httpd/httpd.conf && \
  uncomment 'LoadModule macro_module' /usr/local/etc/httpd/httpd.conf && \
  uncomment 'LoadModule rewrite_module' /usr/local/etc/httpd/httpd.conf \
"

# TODO More elegant solution
if [ ! -e /usr/local/etc/httpd/extra/httpd-vhosts.conf.d ]
then
  ln -s "$HOME/.dotfiles/httpd-vhosts.conf.d" /usr/local/etc/httpd/extra/httpd-vhosts.conf.d
fi

# Brew kegs with casks/services dependencies
install_or_update_brew_keg ant # requires java
install_or_update_brew_keg php # requires httpd
install_or_update_brew_keg composer # requires php

# Apache SSL setup
if [ -e /usr/local/etc/httpd/server.crt ]
then
  echo "$(green ✓) $(cyan Apache SSL) is already configured"
else
  echo "$(blue ▶) Setting up $(cyan Apache SSL)..."
  uncomment 'LoadModule socache_shmcb_module lib/httpd/modules/mod_socache_shmcb.so' /usr/local/etc/httpd/httpd.conf
  uncomment 'LoadModule ssl_module lib/httpd/modules/mod_ssl.so' /usr/local/etc/httpd/httpd.conf
  uncomment 'Include /usr/local/etc/httpd/extra/httpd-ssl.conf' /usr/local/etc/httpd/httpd.conf

  [ ! -e /tmp/server.cnf ] || rm -rf /tmp/server.cnf
  cat /usr/local/etc/openssl/openssl.cnf > /tmp/server.cnf
  printf '[SAN]\nsubjectAltName=DNS:localhost\n' >> /tmp/server.cnf
  openssl req -x509 -sha256 -nodes -days 3650 -newkey rsa:2048 -keyout /usr/local/etc/httpd/server.key -out /usr/local/etc/httpd/server.crt -subj /CN=localhost -reqexts SAN -extensions SAN -config /tmp/server.cnf
  rm -rf /tmp/server.cnf
  echo "Open $(magenta 'chrome://flags/#allow-insecure-localhost') in Google Chrome to disable SSL warnings for localhost."
  open '/Applications/Utilities/Keychain Access.app' /usr/local/etc/httpd/server.crt
  brew services restart httpd
  echo "$(green ✓) Done"
fi

# Apache GZip setup
# TODO Separate function
if [ -e /usr/local/etc/httpd/extra/httpd-deflate.conf ]
then
  echo "$(green ✓) $(cyan Apache deflate module) is already configured"
else
  echo "$(blue ▶) Setting up $(cyan Apache deflate module)..."
  cat <<EOF | trim | tee /usr/local/etc/httpd/extra/httpd-deflate.conf > /dev/null
    <IfModule deflate_module>
      SetOutputFilter DEFLATE

      # You can't compress what is already compressed
      SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png)$ no-gzip dont-vary
      SetEnvIfNoCase Request_URI \\.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary

      # Make proxies work as they should.
      <IfModule headers_module>
        Header append Vary User-Agent
      </IfModule>
    </IfModule>
EOF
  if ! grep -q httpd-deflate /usr/local/etc/httpd/httpd.conf
  then
    printf '\nInclude /usr/local/etc/httpd/extra/httpd-deflate.conf\n' >> /usr/local/etc/httpd/httpd.conf
    brew services restart httpd
  fi
  brew services restart httpd
  echo "$(green ✓) Done"
fi

# PHP
# TODO Separate function
if [ ! -e /usr/local/etc/httpd/extra/httpd-php.conf ]
then
  cat <<EOF | trim | tee /usr/local/etc/httpd/extra/httpd-php.conf > /dev/null
    LoadModule php7_module /usr/local/opt/php/lib/httpd/modules/libphp7.so

    <FilesMatch \\.php$>
        SetHandler application/x-httpd-php
    </FilesMatch>

    DirectoryIndex index.php index.html
EOF
fi

# TODO More elegant solution
pecl list | grep -q xdebug || pecl install xdebug

# TODO More elegant solution
replace_inline 'memory_limit = 128M' 'memory_limit = 1024M' /usr/local/etc/php/7.2/php.ini
if ! grep -q php /usr/local/etc/httpd/httpd.conf
then
  printf '\nInclude /usr/local/etc/httpd/extra/httpd-php.conf\n' >> /usr/local/etc/httpd/httpd.conf
  brew services restart httpd
fi

# Default Shell
zsh_path="$(command -v zsh)"

if grep "$zsh_path" /etc/shells > /dev/null
then
  echo "$(green ✓) $(cyan "$zsh_path") exits already in /etc/shells"
else
  echo "$(blue ▶) Adding $(cyan "$zsh_path") to $(yellow /etc/shells)"
  echo "$zsh_path" | sudo tee /etc/shells > /dev/null
  echo "$(green ✓) Done"
fi

if [ "$(dscl . -read "/Users/$USER" UserShell | sed 's/^[^ ]* //')" = "$zsh_path" ]
then
  echo "$(green ✓) Default shell already set to $(cyan "$zsh_path")."
else
  echo "$(blue ▶) Setting default shell to $(cyan "$zsh_path")..."
  chsh -s "$zsh_path"
  echo "$(green ✓) Done"
  echo
fi

# Fonts
echo '
  https://github.com/powerline/fonts/blob/master/Meslo%20Dotted/Meslo%20LG%20L%20DZ%20Bold%20Italic%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Dotted/Meslo%20LG%20L%20DZ%20Bold%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Dotted/Meslo%20LG%20L%20DZ%20Italic%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Dotted/Meslo%20LG%20L%20DZ%20Regular%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Dotted/Meslo%20LG%20M%20DZ%20Bold%20Italic%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Dotted/Meslo%20LG%20M%20DZ%20Bold%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Dotted/Meslo%20LG%20M%20DZ%20Italic%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Dotted/Meslo%20LG%20M%20DZ%20Regular%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Dotted/Meslo%20LG%20S%20DZ%20Bold%20Italic%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Dotted/Meslo%20LG%20S%20DZ%20Bold%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Dotted/Meslo%20LG%20S%20DZ%20Italic%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Dotted/Meslo%20LG%20S%20DZ%20Regular%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20L%20Bold%20Italic%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20L%20Bold%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20L%20Italic%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20L%20Regular%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Bold%20Italic%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Bold%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Italic%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20S%20Bold%20Italic%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20S%20Bold%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20S%20Italic%20for%20Powerline.ttf?raw=true
  https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20S%20Regular%20for%20Powerline.ttf?raw=true
' | trim_empty_lines | \
while read -r url
do
  download_file "$HOME/Library/Fonts" "$url"
done

# Prezto
install_or_update directory "$HOME/.zprezto" "Zprezto" \
  "git clone --recursive https://github.com/sorin-ionescu/prezto.git '$HOME/.zprezto'"  \
  "(cd '$HOME/.zprezto' && git pull --rebase --recurse-submodules)"

# SSH
if [ ! -e "$HOME/.ssh/id_rsa" ]
then
  echo "Generating SSH keys..."
  ssh-keygen -t rsa -b 4096 -C "$(git config --global user.email)" -f "$HOME/.ssh/id_rsa"

  echo "Adding SSH key to the ssh-agent"
  eval "$(ssh-agent -s)"

  echo "Seting SSH config to automatically load ssh-agent..."
  if [ -e "$HOME/.ssh/config" ]
  then
    echo "Warning: $HOME/.ssh/config, skipping"
  else
    echo "Host *
      AddKeysToAgent yes
      UseKeychain yes
      IdentityFile ~/.ssh/id_rsa" > "$HOME/.ssh/config"
    echo "Done"
  fi
  echo
fi

# GPG keys
if [ -z "$(gpg --list-secret-keys)" ]
then
  echo "$(red ✗ No GPG key found.) Please create one using: $(yellow gpg --full-generate-key)" >&2
  exit 1
fi
gpg_key_id="$(gpg --list-secret-keys --keyid-format LONG | grep 'sec ' | sed 's/^.*rsa4096\/\([^ ]*\).*$/\1/')"
echo "$(green ✓) Found GPG key: $(cyan "$gpg_key_id")"
if [ -z "$(git config --global user.signingkey)" ]
then
  echo "$(blue ▶) Setting git to use GPG key $(cyan "$gpg_key_id")"
  git config --global user.signingkey "$gpg_key_id"
  echo "$(green ✓) Done"
elif [ "$(git config --global user.signingkey)" = "$gpg_key_id" ]
then
  echo "$(green ✓) git already set to use GPG key $(cyan "$gpg_key_id")"
else
  echo "$(yellow '⚠ Warning:') git set to use GPG key $(magenta "$(git config --global user.signingkey)") instead of $(cyan "$gpg_key_id")"
fi
echo

# Dnsmasq
# TODO Find a more elegant solution
dnsmasq_config="$(brew --prefix)/etc/dnsmasq.conf"

if [ -e "$dnsmasq_config.bak" ]
then
  echo "$(green ✓) File already exists: $(cyan "$dnsmasq_config.bak")"
else
  mv "$dnsmasq_config" "$dnsmasq_config.bak"
fi

if [ -e "$dnsmasq_config" ]
then
  echo "$(green ✓) File already exists: $(cyan "$dnsmasq_config")"
else
  create_directory_if_not_exists "$(brew --prefix)/etc"

  cat <<EOF | trim | tee "$dnsmasq_config" > /dev/null
    # Configuration file for dnsmasq.
    # See "/usr/sbin/dnsmasq --help" or "man 8 dnsmasq" for details.

    listen-address=127.0.0.1
    address=/local/127.0.0.1
    address=/localhost/127.0.0.1
    address=/test/127.0.0.1
EOF
  sudo brew services restart dnsmasq
  dig foo.test @localhost | grep -qE '^foo\.test\..*127\.0\.0\.1'
  dig foo.local @localhost | grep -qE '^foo\.local\..*127\.0\.0\.1'
  dig foo.localhost @localhost | grep -qE '^foo\.localhost\..*127\.0\.0\.1'
fi

# TODO Find a more elegant solution
[ -d /etc/resolver ] || sudo mkdir /etc/resolver

# TODO Find a more elegant solution
[ -e /etc/resolver/local ] || sudo bash -c 'echo "nameserver 127.0.0.1" > /etc/resolver/local'
[ -e /etc/resolver/localhost ] || sudo bash -c 'echo "nameserver 127.0.0.1" > /etc/resolver/localhost'
[ -e /etc/resolver/test ] || sudo bash -c 'echo "nameserver 127.0.0.1" > /etc/resolver/test'
# ping -c 1 foo.local >/dev/null # Bonjour service overrides this
ping -c 1 foo.localhost >/dev/null
ping -c 1 foo.test >/dev/null

# Setup.app
install_or_update application "Setup" "Setup application" "osacompile -o '$HOME/Applications/Setup.app' '$dir/../src/setup.applescript'"
install_or_update login_item "Setup" "Setup login item" "add_login_item '$HOME/Applications/Setup.app'"

# Minimize.app
install_or_update application "Minimize" "Minimize application" "osacompile -o '$HOME/Applications/Minimize.app' '$dir/../src/minimize.applescript'"
install_or_update login_item "Minimize" "Minimize login item" "add_login_item '$HOME/Applications/Minimize.app' 1"

# Disable the sound effects on boot
if [ -e /Library/Scripts/macos-mute-off ] && [ -e /Library/Scripts/macos-mute-on ]
then
  echo "$(green ✓) Startup sound already disabled"
else
  echo "$(blue ▶) Disabling startup sound"
  printf '#!/usr/bin/env sh\n\nosascript -e "set volume without output muted"\n' | sudo tee /Library/Scripts/macos-mute-off > /dev/null
  printf '#!/usr/bin/env sh\n\nosascript -e "set volume with output muted"\n' | sudo tee /Library/Scripts/macos-mute-on > /dev/null
  sudo chmod +x /Library/Scripts/macos-mute-off /Library/Scripts/macos-mute-on
  sudo defaults write com.apple.loginwindow LoginHook "/Library/Scripts/macos-mute-off"
  sudo defaults write com.apple.loginwindow LogoutHook "/Library/Scripts/macos-mute-on"
  echo "$(green ✓) Done"
  echo
fi

# System preferences

# General
macos_set_preference NSGlobalDomain ApplePersistence bool 0
macos_set_preference NSGlobalDomain com.apple.sound.beep.flash bool 1
macos_set_preference NSGlobalDomain com.apple.springing.delay float 1
macos_set_preference NSGlobalDomain com.apple.swipescrolldirection bool 0
macos_set_preference NSGlobalDomain DSDontWriteNetworkStores bool 1
macos_set_preference NSGlobalDomain NSDisableAutomaticTermination bool 1
macos_set_preference NSGlobalDomain NSDocumentSaveNewDocumentsToCloud bool 0
macos_set_preference NSGlobalDomain NSNavPanelExpandedStateForSaveMode bool 1
macos_set_preference NSGlobalDomain NSTextShowsControlCharacters bool 1
macos_set_preference NSGlobalDomain NSWindowResizeTime float 0.2
macos_set_preference NSGlobalDomain PMPrintingExpandedStateForPrint bool 1

# Launch services
macos_set_preference com.apple.LaunchServices LSQuarantine bool 0

# Help
macos_set_preference com.apple.helpviewer DevMode bool 1

# Dock
macos_set_preference com.apple.dock autohide bool 1
macos_set_preference com.apple.dock launchanim bool 0
macos_set_preference com.apple.dock minimize-to-application bool 1
macos_set_preference com.apple.dock autohide-time-modifier float 0.2
macos_set_preference com.apple.dock mineffect string scale
macos_set_preference com.apple.dock enable-spring-load-actions-on-all-items bool 1

# Finder
macos_set_preference com.apple.finder QuitMenuItem bool 1
macos_set_preference com.apple.finder DisableAllAnimations bool 1
macos_set_preference com.apple.finder FXDefaultSearchScope string "SCcf" # When performing a search, search the current folder by default
macos_set_preference com.apple.finder FXPreferredViewStyle string 'Nlsv' # Use list view in all Finder windows by default
macos_set_preference com.apple.finder FXEnableExtensionChangeWarning bool 0
macos_set_preference com.apple.finder QLEnableTextSelection bool 1
macos_set_preference com.apple.finder DisableAllAnimations bool 1
macos_set_preference com.apple.finder expose-animation-duration float 0.1 # Speed up Mission Control animations

# Other
macos_set_preference /Library/Preferences/com.apple.loginwindow GuestEnabled bool 0 SUDO
macos_set_preference /Library/Preferences/SystemConfiguration/com.apple.smb.server AllowGuestAccess bool 0 SUDO
macos_set_preference /Library/Preferences/com.apple.AppleFileServer guestAccess bool 0 SUDO
macos_set_preference org.R-project.R force.LANG string en_US.UTF-8 # Fix 'tar: Failed to set default locale' warning

echo

# Atom packages
install_or_update_atom_package package-sync

# Atom packages dependencies
composer global require squizlabs/php_codesniffer # linter-phpcs

# Node versions
install_or_update_nvm_node_version node
install_or_update_nvm_node_version --lts
install_or_update_nvm_node_version 6
install_or_update_nvm_node_version 4
install_or_update_nvm_node_version 0.12
install_or_update_nvm_node_version 0.10
nvm_outdated_versions | while read v
do
  echo "Uninstalling Node $(cyan $v)..."
  bash -c ". /usr/local/opt/nvm/nvm.sh && nvm uninstall \"$v\""
  rm -rf "$NVM_DIR/_default_version"
  echo "$(green ✓) Done"
done

# Workspace
create_directory_if_not_exists "$HOME/Workspace"
if [ ! -e "$HOME/Workspace/phpinfo.php" ]
then
  echo '<?php phpinfo(); ?>' > "$HOME/Workspace/phpinfo.php"
fi
