[alias]
	amend = commit --amend --no-edit
	clean-merged-branches = "! git merged-branches | while read branch; do git branch -d $branch; done"
	clean-squashed-branches = "! git squashed-branches | while read branch; do git branch -D $branch; done"
	cleanup = ! git checkout master && git pull && git clean-merged-branches
	cleanup-full = ! git checkout master && git pull && git clean-merged-branches && git clean-squashed-branches
	clone-branch = clone -b
	commit-message = "! git_commit_message() { message=\"$@\"; git commit -m \"$message\" --date=\"$(git_date)\"; }; source $HOME/.dotfiles/profile.d/git && git_commit_message"
	commit-message-no-verify = "! git_commit_message() { message=\"$@\"; git commit -m \"$message\" --date=\"$(git_date)\" --no-verify; }; source $HOME/.dotfiles/profile.d/git && git_commit_message"
	commit-wip = commit --no-verify -m wip
	conflicts = ! $GRAPHICAL_EDITOR . $(git list-conflicts)
	current-local-branch = ! source $HOME/.dotfiles/profile.d/git && git_current_local_branch
	current-remote-branch = ! git rev-parse --abbrev-ref --symbolic-full-name $(git current-local-branch)@{u}
	diff-cached = diff --cached
	edit = "! git_edit() { git edit-list \"$@\" | xargs $GRAPHICAL_EDITOR .; }; git_edit"
	edit-list = "! git_edit_list() { if [ \"$#\" = 0 ]; then git status --untracked-files --porcelain; else git diff --name-status \"${1}~1..${1}\"; fi| grep -v -E 'D\\W' | awk '{ print $2; }'; }; git_edit_list"
	forked = ! git graph $(git current-local-branch) $(git current-remote-branch)
	graph = log --graph --pretty=friendly --color=always
	history = log --follow --pretty=history --color=always --
	history-log = log --follow -p --
	histories = "! git_histories() { for path in "$@"; do echo; echo \"$path\"; echo '---'; git history \"$path\"; done; }; git_histories"
	ignore = update-index --assume-unchanged
	list-conflicts = diff --name-only --diff-filter=U
	merged-branches = ! git branch --merged | egrep -v '^\\*'
	new = ! git graph $(git current-local-branch) --not $(git current-remote-branch)
	old = ! git graph $(git current-remote-branch) --not $(git current-local-branch)
	push-all = ! source $HOME/.dotfiles/lib/colors.sh && source $HOME/.dotfiles/profile.d/git && git_push_all
	push-upstream = "! if git unique-remote >/dev/null; then git push --set-upstream \"$(git unique-remote)\" \"$(git current-local-branch)\"; else echo \"Found multiple remotes: $(echo $(git remote) | sed 's/ /, /g')\"; exit 1; fi"
	rebase-auto = "rebase -X ours"
	recent-branches = for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/ --count=10
	renew = ! git rework $(git log --format=format:%H $(git current-local-branch) --not $(git current-remote-branch) | tail -n 1)
	renew-all = ! git renew && git push-all
	rework = ! source $HOME/.dotfiles/lib/colors.sh && source $HOME/.dotfiles/profile.d/git && git_rework
	show-files = show --name-only
	squashed-branches = ! source $HOME/.dotfiles/profile.d/git && git_squashed_branches
	unignore = update-index --no-assume-unchanged
	unique-remote = "! git_unique_remote() { remotes=\"$(git remote)\"; if [ $(echo \"$remotes\" | wc -l) = 1 ]; then echo \"$remotes\"; else echo \"$remotes\" | wc -l; return 1; fi; }; git_unique_remote"
[color "advice"]
	hint = black
[color "branch"]
	local = yellow
	remote = blue
	plain = magenta
	upstream = blue bold
[color "decorate"]
	branch = yellow
	HEAD = yellow dim
	remoteBranch = blue
	tag = magenta
[color "diff"]
	commit = blue
	context = normal
	frag = black
	func = black
	meta = blue
	whitespace = red reverse
[commit]
	gpgsign = true
[core]
	excludesfile = /Users/amercier/.dotfiles/extra/.gitignore_global
	pager = less -x1,5
	ignorecase = false
[pretty]
	friendly = "\t%C(black)%h%C(reset) %<(80,trunc)%s %C(cyan)%>(10,trunc)%cr %C(dim white)%<(12,trunc)%aN%C(reset) %C(reset)%C(auto)%d%C(reset)"
	history = "%C(black)%h%C(reset) %<(80,trunc)%s %C(cyan)%>(12,trunc)%cd%x08%x08 %C(dim white)%aN%C(reset)"
[user]
	name = Alex Mercier
	email = pro.alexandre.mercier@gmail.com
	signingkey = A4A0BA9DE4FC1F8D
[pull]
	rebase = false
