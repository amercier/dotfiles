#!/usr/bin/env sh
#
# Utility functions for .profile.d scripts

# Check if a string contains agiven substring
#
# @param 1 String to check in
# @param 2 Substring to look for
# @param 3 Delimiter. Defaults to `[:space:]` (see `man tr`)
str_contains() {
  echo "$1" | tr -s "${3-[:space:]}" '\n' | egrep "^$2\$" >/dev/null
}

# Prepend a given path to the `PATH` environment variable
#
# @param 1 New path to add
prepend_to_path() {
  if str_contains "$PATH" "$1" :
  then
    if [ "${2-}" = '-f' ]
    then
      PATH=$(echo $PATH | tr ':' '\n' | egrep -v "^$1\$" | tr '\n' ':')
      PATH="$1:$PATH"
    else
      echo "Warning: $1 is already in PATH" >&2
    fi
  else
    PATH="$1:$PATH"
  fi
}

# Whether a command exists.
#
# @param 1 Command to check
# @returns `0` if the command was found using `which`, `1` otherwise
command_exists() {
  which "$1" >/dev/null 2>&1
}

# Whether multiple commands exist.
#
# @param ... Commands to check
# @returns `0` if all given commands were found using `which`, `1` otherwise
commands_exist() {
  for i; do command_exists "$i" || return 1; done
  return 0
}

# Whether a directory exists
#
# @param 1 Directory to check
# @returns `0` if the directory exists, `1` otherwise
directory_exists() {
  [ -d "$1" ]
}

# Whether an Atom Package is installed
#
# @param 1 Package name
# @returns `0` if the package is installed, `1` otherwise
atom_package_exists() {
  [ -d "$HOME/.atom/packages/$1" ]
}

# Install or upgrade a Brew command
#
# @param 1 Command name
install_or_update_atom_package() {
  install_or_update atom_package "$1" "$1" "apm install $1" "apm upgrade $1"
}

# Whether a Brew keg exists
#
# @param 1 Keg name
# @returns `0` if the Brew keg exists, `1` otherwise
brew_keg_exists() {
  if [ -z "${BREW_PATH-}" ]
  then
    command_exists brew && [ -d "$(brew --prefix)/opt/$1" ]
  else
    [ -d "$BREW_PATH/$1" ]
  fi
}

# Whether an application exists in `/Applications` or `$HOME/Applications`
#
# @param 1 Application name to check, without `.app`
# @returns `0` if the application directory exists, `1` otherwise
application_exists() {
  directory_exists "/Applications/$1.app" || directory_exists -d "$HOME/Applications/$1.app"
}

# Install or update a command or an application
#
# @param 1 Type of what to install: command or application
# @param 2 Name of the application or command to check
# @param 3 Name of the application or command to display
# @param 4 Install command
# @param 5 Update command
install_or_update() {
  if ! eval "${1}_exists" \'"$2"\'
  then
    echo ▶ installing "$3…"
    eval "$4"
  elif [ -n "${5-}" ]
  then
    echo ▲ "$3" is already installed, updating...
    eval "$5"
    echo ✓ "$3" is up-to-date.
  else
    echo ✓ "$3" is already installed, nothing to update.
  fi
  echo
}

# Decode a URL-encoded string
# @param stdin Text to decode
url_decode() {
  if [ "$#" = 0 ]
  then
    python -c 'import urllib; import sys; sys.stdout.write(urllib.unquote(sys.stdin.read()));'
  else
    echo "$@" | url_decode
  fi
}

# Trim empty lines
#
# @param stdin Text to trim
trim() {
  sed '/^[[:space:]]*$/d'
}

# File name from an URL
#
# @param stdin URLs
# @param 1 Replacement string. Defaults to '-'
url_to_filename() {
  replacement="${1--}"
  while read line
  do
    echo "$line" \
    | egrep -o '[^/]+$' \
    | egrep -o '^[^?#]+' \
    | url_decode \
    | sed "s/[<>:\"/\\|?*]/$replacement/g"
  done
}

# Download a file in a directory if it doesn't exists already.
#
# @param 1 Destination directory
# @param 2 Download URL
# @param 3 Filename. Inferred from URL by default.
download_file() {
  if [ -n "${3-}" ]
  then
    filename="$3"
  else
    filename=$(echo "$2" | url_to_filename)
  fi
  fullpath="$1/$filename"
  if [ -e "$fullpath" ]
  then
    echo $(ansi_printf green ✓) File $(ansi_printf cyan $filename) already exists in $(ansi_printf magenta $1).
  else
    echo $(ansi_printf blue ▼) Downloading $(ansi_printf cyan $2) to $(ansi_printf magenta $1)…
    echo curl -# -L "$2" > "$fullpath"
    echo $(ansi_printf green ✓) Done.
    echo
  fi
}
