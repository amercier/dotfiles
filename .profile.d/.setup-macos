#!/usr/bin/env sh

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

# Set magic variables for current file & dir
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

. ${__dir}/_lib

# Whether an application exists in `/Applications` or `$HOME/Applications`
#
# @param 1 Application name to check, without `.app`
# @returns `0` if the application directory exists, `1` otherwise
application_exists() {
  directory_exists "/Applications/$1.app" || directory_exists -d "$HOME/Applications/$1.app"
}

# Install App Store upgrades for an application
#
# @param 1 Name of the application
install_app_store_upgrades() {
  softwareupdate --list | grep "\* $1" | sed "s/^[^A-Z]*//" | while read update
  do
    echo "Installing App Store update: $update"
    softwareupdate --install --no-scan "$update" || return 1
  done || return 0
}

# Upgrade a Cask
#
# @param 1 Cask name
brew_cask_upgrade() {
  if [ -n "$(brew cask outdated $1)" ]; then
    echo "$1 is outdated, upgrading..."
    # brew cask reinstall $1
  else
    echo "$1 is up-to-date"
  fi
}

# Upgrade a Brew keg
#
# @param 1 Keg name
brew_upgrade() {
  if [ -n "$(brew outdated $1)" ]; then
    echo "$1 is outdated, upgrading..."
    brew upgrade "$1" --cleanup
  else
    echo "$1 is up-to-date"
  fi
}

brew_command_exists() {
  [ -x "$(brew --prefix)/bin/$1" ]
}

# Install or upgrade a Brew command
#
# @param 1 Command name
install_or_update_brew_command() {
  install_or_update brew_command "$1" "$1" "brew install $1" "brew_upgrade $1"
}

# Install or upgrade a Brew cask
#
# @param 1 Cask name
# @param 2 Application name
install_or_update_brew_cask() {
  install_or_update application "$1" "$1" "brew cask install $2" "brew_cask_upgrade $2"
}

# Get ID of a Mac App Store application
#
# @param 1 Application name
mas_id() {
  mas search "$1" | tr ' ' '\n' | head -n 1
}

# Install or upgrade a a Mac App Store application
#
# @param 1 Application name
install_or_update_mas_application() {
  install_or_update application "$1" "$1" "mas install $(mas_id $1)" "mas upgrade $(mas_id $1)"
}

# Set System Preference value.
#
# @param 1 Domain. Use `defaults domains | tr ', ' '\n'` to list domains
# @param 2 Variable name
# @param 3 Variable type: bool, ...
# @param 4 Value to set
macos_set_preference() {

  if [ "$(defaults read $1 $2 2>/dev/null)" = "$4" ]
  then
    echo ✓ System preference "$1" "$2" already set to "$4"
    return
  fi

  if [ "$3" != "bool" ]
  then
    value="$4"
  elif [ "$4" = "1" ]
  then
    value=true
  else
    value=false
  fi
  echo ▶ Setting system preference "$1" "$2" to "$value"
  if [ "$#" = 5 ] && [ -n "$5" ]
  then
    sudo defaults write "$1" "$2" "-$3" "$value"
  else
    defaults write "$1" "$2" "-$3" "$value"
  fi
  echo ✓ Done
  echo
}

# App Store updates
echo ▲ "Looking for App Store updates..."
softwareupdate --install --all

# Xcode Command Line Tools
install_or_update directory "$(xcode-select -p)" "Command Line Tools for Xcode" \
  'xcode-select --install' \
  ''

# Brew
install_or_update command brew Homebrew \
  '/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"' \
  'brew update && brew prune && brew cleanup'

# Brew kegs
install_or_update_brew_command git
install_or_update_brew_command gpg
install_or_update_brew_command mas
install_or_update_brew_command shellcheck

# App Store
install_or_update_mas_application Dashlane
install_or_update_mas_application Moom

# Brew casks
install_or_update_brew_cask Atom atom
install_or_update_brew_cask Catlight catlight
install_or_update_brew_cask Flux flux
install_or_update_brew_cask "Google Chrome" google-chrome
install_or_update_brew_cask "GPG Keychain" gpg-suite
install_or_update_brew_cask iTerm iterm2
if [ -n "$(sysctl hw.model | grep MacBookAir)" ]
then
  install_or_update_brew_cask Karabiner-Elements karabiner-elements
fi

# SSH
if [ ! -e "$HOME/.ssh/id_rsa" ]
then
  echo "Generating SSH keys..."
  ssh-keygen -t rsa -b 4096 -C "$(git config --global user.email)" -f "$HOME/.ssh/id_rsa"

  echo "Adding SSH key to the ssh-agent"
  eval "$(ssh-agent -s)"

  echo "Seting SSH config to automatically load ssh-agent..."
  if [ -e "$HOME/.ssh/config" ]
  then
    echo "Warning: $HOME/.ssh/config, skipping"
  else
    echo "Host *
      AddKeysToAgent yes
      UseKeychain yes
      IdentityFile ~/.ssh/id_rsa" > "$HOME/.ssh/config"
    echo "Done"
  fi
  echo
fi

# GPG keys
if [ -z "$(gpg --list-secret-keys)" ]
then
  echo "✗ No GPG key found. Please create one using: gpg --full-generate-key" >&2
  exit 1
fi
gpg_key_id="$(gpg --list-secret-keys --keyid-format LONG | grep 'sec ' | sed 's/^.*rsa4096\/\([^ ]*\).*$/\1/')"
echo "✓ Found GPG key: $gpg_key_id"
if [ -z "$(git config --global user.signingkey)" ]
then
  echo ▶ Setting git to use GPG key $gpg_key_id
  git config --global user.signingkey "$gpg_key_id"
  echo ✓ Done
elif [ "$(git config --global user.signingkey)" = "$gpg_key_id" ]
then
  echo ✓ git already set to use GPG key $gpg_key_id
else
  echo "⚠ Warning: git set to use GPG key $(git config --global user.signingkey) instead of $gpg_key_id"
fi
echo

# Disable the sound effects on boot
if [ -e /Library/Scripts/macos-mute-off ] && [ -e /Library/Scripts/macos-mute-on ]
then
  echo ✓ Startup sound already disabled
else
  echo ▶ Disabling startup sound
  printf '#!/usr/bin/env sh\n\nosascript -e "set volume without output muted"\n' | sudo tee /Library/Scripts/macos-mute-off > /dev/null
  printf '#!/usr/bin/env sh\n\nosascript -e "set volume with output muted"\n' | sudo tee /Library/Scripts/macos-mute-on > /dev/null
  sudo chmod +x /Library/Scripts/macos-mute-off /Library/Scripts/macos-mute-on
  sudo defaults write com.apple.loginwindow LoginHook "/Library/Scripts/macos-mute-off"
  sudo defaults write com.apple.loginwindow LogoutHook "/Library/Scripts/macos-mute-on"
  echo ✓ Done
  echo
fi

# System preferences

# General
macos_set_preference NSGlobalDomain NSWindowResizeTime float 0.2
macos_set_preference NSGlobalDomain NSNavPanelExpandedStateForSaveMode bool 1
macos_set_preference NSGlobalDomain PMPrintingExpandedStateForPrint bool 1
macos_set_preference NSGlobalDomain NSDocumentSaveNewDocumentsToCloud bool 1
macos_set_preference NSGlobalDomain NSTextShowsControlCharacters bool 1
macos_set_preference NSGlobalDomain NSDisableAutomaticTermination bool 1
macos_set_preference NSGlobalDomain DSDontWriteNetworkStores bool 1
macos_set_preference NSGlobalDomain com.apple.sound.beep.flash bool 1
macos_set_preference NSGlobalDomain com.apple.springing.delay float 0

# Launch services
macos_set_preference com.apple.LaunchServices LSQuarantine bool 0

# Help
macos_set_preference com.apple.helpviewer DevMode bool 1

# Dock
macos_set_preference com.apple.dock autohide bool 1
macos_set_preference com.apple.dock launchanim bool 0
macos_set_preference com.apple.dock minimize-to-application bool 1
macos_set_preference com.apple.dock autohide-time-modifier float 0.2
macos_set_preference com.apple.dock mineffect string scale
macos_set_preference com.apple.dock enable-spring-load-actions-on-all-itemsn bool 1

# Finder
macos_set_preference com.apple.finder QuitMenuItem bool 1
macos_set_preference com.apple.finder DisableAllAnimations bool 1
macos_set_preference com.apple.finder FXDefaultSearchScope string "SCcf" # When performing a search, search the current folder by default
macos_set_preference com.apple.finder FXPreferredViewStyle string 'Nlsv' # Use list view in all Finder windows by default
macos_set_preference com.apple.finder FXEnableExtensionChangeWarning bool 0
macos_set_preference com.apple.finder QLEnableTextSelection bool 1
macos_set_preference com.apple.finder DisableAllAnimations bool 1
macos_set_preference com.apple.finder expose-animation-duration float 0.1 # Speed up Mission Control animations

# Other
macos_set_preference /Library/Preferences/com.apple.loginwindow GuestEnabled bool 0 SUDO
macos_set_preference /Library/Preferences/SystemConfiguration/com.apple.smb.server AllowGuestAccess bool 0 SUDO
macos_set_preference /Library/Preferences/com.apple.AppleFileServer guestAccess bool 0 SUDO

echo
